@mixin mq-at-least($device-width) {
     @media screen and (min-width: $device-width){
        @content;
    }
}
@mixin mq-until($device-width) {
     @media screen and (max-width: $device-width - 1){
        @content;
    }
}

// Remove units from digits (px, em, rem, ch, etc...)
// ---------------------------------------------------------------------------
@function strip-unit($number) {
    @return $number / ($number * 0 + 1);
}

// INCREASE value from min to max between min & max dimensions
// ---------------------------------------------------------------------------
@function fluid-increase($min-vw, $max-vw, $min-value, $max-value) {
    @return calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$max-vw}) / #{strip-unit($min-vw - $max-vw)});
}

// DECREASE value from min to max between min & max dimensions
// ---------------------------------------------------------------------------
@function fluid-decrease($min-vw, $max-vw, $min-value, $max-value) {
    @return calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * (100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)});
}

// ---------------------------------------------------------------------------
@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value, $dir: 'decrease') {
    & {
        @each $property in $properties {
            #{$property}: if($dir == 'increase', $max-value, $min-value);
        }

        @media screen and (min-width: $min-vw) {
            @each $property in $properties {
                $scale: fluid-decrease($min-vw, $max-vw, $min-value, $max-value);

                @if $dir == 'increase' {
                    $scale: fluid-increase($min-vw, $max-vw, $min-value, $max-value);
                }

                #{$property}: $scale;
            }
        }

        @media screen and (min-width: $max-vw) {
            @each $property in $properties {
                #{$property}: if($dir == 'increase', $min-value, $max-value);
            }
        }
    }
}

//generic transform
@mixin transform($transforms) {
       -moz-transform: $transforms;
         -o-transform: $transforms;
        -ms-transform: $transforms;
    -webkit-transform: $transforms;
          transform: $transforms;
}

// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}

// glitch
// https://css-tricks.com/glitch-effect-text-images-svg/

/*
  (TEXT) PARAMS
  =================
  1. Namespace
  2. Intensity
  3. Text color
  4. Background color (flat)
  5. Highlight #1 color
  6. Highlight #2 color
  7. Width (px)
  8. Height (px)
*/

@mixin textGlitch($name, $intensity, $textColor, $background, $highlightColor1, $highlightColor2, $width, $height) {

  color: $textColor;
  position: relative;
  $steps: $intensity;

  // Ensure the @keyframes are generated at the root level
  @at-root {
    // We need two different ones
    @for $i from 1 through 2 {
      @keyframes #{$name}-anim-#{$i} {
        @for $i from 0 through $steps {
          #{percentage($i*(1/$steps))} {
            clip: rect(
              random($height)+px,
              $width+px,
              random($height)+px,
              0
            );
          }
        }
      }
    }
  }
  &:before,
  &:after {
    content: attr(data-text);
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    background: $background;
    clip: rect(0, 0, 0, 0);
  }
  &:after {
    left: 2px;
    text-shadow: -1px 0 $highlightColor1;
    animation: #{$name}-anim-1 2s infinite linear alternate-reverse;
  }
  &:before {
    left: -2px;
    text-shadow: 2px 0 $highlightColor2;
    animation: #{$name}-anim-2 3s infinite linear alternate-reverse;
  }

}
